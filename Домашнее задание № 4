Задание № 1
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.


def bonus_kvartal():
    return (time * salary) + bonus

time = int(input("Введите выработку в часах: "))
salary = int(input("Введите ставку в час: "))
bonus = int(input("Укажите размер премии: "))
bonus_kvartal = (time * salary) + bonus

#Создадим новый файл, сообщим библиотеке откуда брать переменную
from fileone import bonus_kvartal
#Выведем результат переменной
print(bonus_kvartal)

Задание № 2
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].

roster = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

for el in range(1, len(roster)):
    if roster[el] > roster[el-1]:
        print(roster[el])

Задание № 3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.

my_list = range(20, 240)
my_new_list = [my_list[el] for el in range(len(my_list)) if my_list[el] % 20 == 0 or my_list[el] % 21 == 0]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')


Задание № 4
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
for i in range(len(my_list)):
        if my_list.count(my_list[i]) == 1:
            print(my_list[i])


Задание № 5
Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()

from functools import reduce

def my_func(el_p, el):
    return el_p * el

print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')


Задание № 6
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

*Я сделал проверку списка, если видит дубль значения, то мы его исключаем.
Список, который нас удовлетворяет повторяем 10 раз. 

from itertools import count

for el in count(3):
    if el > 10:
        break
    else:
        print(el)

from itertools import cycle

my_list = ["ABC","ABC","ABC", False, 34, 7.8]
c = 0
for el in cycle(my_list):
    if c > 10:
        break
    c += 1
    for i in range(len(my_list)):
        if my_list.count(my_list[i]) == 1:
            print(my_list[i])

Задание № 7

Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial


def fgen():
    for i in count(1):
        yield factorial(i)

generator = fgen()
x = 0
for k in generator:
    if x < 15:
        print(k)
        x += 1
    else:
        break
